#!/usr/bin/env node
const fs = require("fs");
const path = require("path");
const program = require("commander");
const inquirer = require("inquirer");
const version = require("../package.json").version;

const projectExist=projectPath => {  
    return fs.existsSync(projectPath)
}
const copy = (targetPath, sourcePath) => {
    if(!projectExist()){
        fs.mkdirSync(targetPath)
    }
    fs.readdir(sourcePath, (error, files) => {
        if (error) return console.error(error);
        files.forEach(file => {
            const filepath = path.join(sourcePath, file);
            const writePath = path.join(targetPath,file)
            fs.stat(filepath, (error, stats) => {
                if (error) return console.error(error);
                //判断是文件还是文件夹
                if (stats.isFile()) {
                    fs.readFile(filepath,(error,buffer)=>{
                        fs.writeFile(writePath,buffer,error=>{
                             if(error) return console.error(error);
                        })
                    })
                } else {
                    copy(writePath,filepath)
                }
            });
        });
    });
};
const initAction = () => {
    inquirer
        .prompt([
            {
                name: "name",
                type: "input",
                message: "Prosect name"
            },
            {
                name: "type",
                type: "list",
                message: "Prosect type",
                choices: ["vue", "react", "dva"]
            }
        ])
        .then(answers => {
            const targetPath = path.join(process.cwd(), answers.name);
            const projectname = `src/${answers.type}-clis-m`;
            const sourcePath = path.join(__dirname, "..", projectname);
            copy(targetPath, sourcePath);
        });
};
program
    .version(version)
    .command("init")
    .description("初始化项目")
    .action(initAction);

program.parse(process.argv);
